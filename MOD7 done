'''
#1. Write a function called count_vowels(input) that takes a string
    and returns the number of vowels (a, e, i, o, u) in it.
'''
def count_vowels(input_string):
    vowels = "aeiou"
    count = sum(1 for char in input_string if char in vowels)
    return count

# Example usage:
text = "I wanna be the very best!"
print(count_vowels(text))  # Output: 3



'''
#2. Write a function called is_palindrome(s) that checks whether a string is a palindrome
    (reads the same forward and backward, ignoring case). The function should returns
    either True or False.
'''
def count_vowels(input_string):
    vowels = "aeiou"
    count = sum(1 for char in input_string if char in vowels)
    return count

def is_palindrome(s):
    s = s.lower()
    return s == s[::-1]

# Example usage:
text = "I wanna be the very best!"
print(count_vowels(text))  # Output: 3

palindrome_text = "moblie"
print(is_palindrome(palindrome_text))  # Output: True


'''
#3. In the game Pokemon, certain types of Pokemon do extra damage to other types.
    For example, water is very effective to fight fire.
    Write a function called type_advantage(attacker, defender) that takes two Pokémon types as
    strings and returns "Super Effective", "Not Very Effective", or "Neutral" based on
    simple type effectiveness rules. Your solution only needs to work for these three sets of input:
    print(type_advantage("Water", "Fire"))  # "Super Effective"
    print(type_advantage("Fire", "Water"))  # "Not Very Effective"
    print(type_advantage("Electric", "Grass"))  # "Neutral"
'''
def count_vowels(input_string):
    vowels = "aeiou"
    count = sum(1 for char in input_string if char in vowels)
    return count

def is_palindrome(s):
    s = s.lower()
    return s == s[::-1]

def type_advantage(attacker, defender):
    effectiveness = {
        ("Water", "Fire"): "Super Effective",
        ("Fire", "Water"): "Not Very Effective",
        ("Electric", "Grass"): "Neutral"
    }
    return effectiveness.get((attacker, defender), "Neutral")

# Example usage:
text = "I wanna be the very best!"
print(count_vowels(text))  # Output: 3

palindrome_text = "moblie"
print(is_palindrome(palindrome_text))  # Output: True

print(type_advantage("Water", "Fire"))  # Output: Super Effective
print(type_advantage("Fire", "Water"))  # Output: Not Very Effective
print(type_advantage("Electric", "Grass"))  # Output: Neutral


'''
#4. Write a function called ferry_fare(age, vehicle) that calculates the Washington State Ferry fare
    based on age and whether the person has a vehicle. Assume the following rates:
    * Adults (19-64): $10 without a vehicle, $20 with a vehicle.
    * Seniors (65+): $5 without a vehicle, $15 with a vehicle.
    * Children (0-18): Free.
'''
def ferry_fare(age, vehicle):
    if age < 0:
        return "Invalid age"

    if age <= 18:  # Children
        return 0  # Free

    elif age <= 64:  # Adults
        if vehicle:
            return 20  # With vehicle
        else:
            return 10  # Without vehicle

    else:  # Seniors
        if vehicle:
            return 15  # With vehicle
        else:
            return 5  # Without vehicle

# Example usage:
print(ferry_fare(30, True))   # Output: 20
print(ferry_fare(70, False))  # Output: 5
print(ferry_fare(15, True))   # Output: 0
'''
#5. Write a function called level_up(experience) that takes a player's experience points
    and returns their new level based on these rules:
    * 0-99 XP → Level 1
    * 100-199 XP → Level 2
    * 200+ XP → Level 3
'''
def level_up(experience):
    if experience < 0:
        return "Invalid experience points"

    if experience < 100:  # 0-99 XP
        return 1
    elif experience < 200:  # 100-199 XP
        return 2
    else:  # 200+ XP
        return 3

# Example usage:
print(level_up(50))   # Output: 1
print(level_up(150))  # Output: 2
print(level_up(250))  # Output: 3
